services:
  postgres:
    image: postgres:15
    container_name: tradeadvisor-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10

  adminer:
    image: adminer:latest
    container_name: tradeadvisor-adminer
    depends_on:
      - postgres
    environment:
      # optional, improves perf on big result sets
      ADMINER_DEFAULT_SERVER: postgres
    ports:
      - "${ADMINER_PORT}:8080"

  minio:
    image: minio/minio:latest
    container_name: tradeadvisor-minio
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    volumes:
      - ../../data/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 10

  mlflow:
    build:
      context: ../../infra/mlflow
      dockerfile: Dockerfile
    image: tradeadvisor-mlflow:local
    container_name: tradeadvisor-mlflow
    depends_on:
      - minio
    environment:
      MLFLOW_S3_ENDPOINT_URL: "http://minio:${MINIO_PORT}"
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      AWS_DEFAULT_REGION: us-east-1
      AWS_REGION: us-east-1
      AWS_S3_SIGNATURE_VERSION: s3v4
      AWS_S3_ADDRESSING_STYLE: path
    command: >
      mlflow server
      --host 0.0.0.0
      --port ${MLFLOW_PORT}
      --backend-store-uri sqlite:////mlflow/mlflow.db
      --default-artifact-root s3://mlflow/
    ports:
      - "${MLFLOW_PORT}:${MLFLOW_PORT}"
    volumes:
      - ../../data/mlflow:/mlflow

  kafka:
    image: bitnami/kafka:3.7
    container_name: tradeadvisor-kafka
    ports:
      - "${KAFKA_PORT}:29092"   # host 9092 -> container EXTERNAL 29092
    environment:
      # KRaft (no ZK)
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: controller,broker
      KAFKA_CFG_NODE_ID: 1
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093

      # Dual listeners: internal (containers) + external (host)
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_CFG_LISTENERS: INTERNAL://:9092,CONTROLLER://:9093,EXTERNAL://:29092
      KAFKA_CFG_ADVERTISED_LISTENERS: INTERNAL://kafka:9092,EXTERNAL://localhost:${KAFKA_PORT}
      KAFKA_CFG_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER

      # Dev-friendly single-node settings
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_CFG_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_CFG_TRANSACTION_STATE_LOG_MIN_ISR: 1
    volumes:
      - ../../data/kafka:/bitnami/kafka
    healthcheck:
      test: ["CMD", "bash", "-lc", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list >/dev/null 2>&1"]
      interval: 10s
      timeout: 5s
      retries: 10

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: tradeadvisor-kafka-ui
    depends_on:
      - kafka
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: tradeadvisor-kafka:9092
    ports:
      - "${KAFKA_UI_PORT}:8080"

  price-ingestor:
    build:
      context: ../..   # repo root
      dockerfile: src/services/PriceIngestor/Dockerfile
    container_name: tradeadvisor-price-ingestor
    environment:
      ASPNETCORE_ENVIRONMENT: "Development"
      POSTGRES_CONNECTION_STRING: "Host=${POSTGRES_HOST};Port=${POSTGRES_PORT};Database=${POSTGRES_DB};Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}"
      Ingest__UniverseCode: "core"
      Ingest__SourceTag: "yahoo"
    depends_on:
      - postgres
    ports:
      - "8088:8080"
    networks:
      - default

volumes:
  pgdata: {}
