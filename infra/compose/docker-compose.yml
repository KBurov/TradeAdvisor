services:
  postgres:
    image: postgres:15
    container_name: tradeadvisor-postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    ports:
      - "${POSTGRES_PORT}:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 3s
      retries: 10

  adminer:
    image: adminer:latest
    container_name: tradeadvisor-adminer
    depends_on:
      - postgres
    environment:
      # optional, improves perf on big result sets
      ADMINER_DEFAULT_SERVER: postgres
    ports:
      - "${ADMINER_PORT}:8080"

  minio:
    image: minio/minio:latest
    container_name: tradeadvisor-minio
    command: server /data --console-address ":${MINIO_CONSOLE_PORT}"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    ports:
      - "${MINIO_PORT}:9000"
      - "${MINIO_CONSOLE_PORT}:9001"
    volumes:
      - ../../data/minio:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 10

  mlflow:
    build:
      context: ../../infra/mlflow
      dockerfile: Dockerfile
    image: tradeadvisor-mlflow:local
    container_name: tradeadvisor-mlflow
    depends_on:
      - minio
    environment:
      MLFLOW_S3_ENDPOINT_URL: "http://minio:${MINIO_PORT}"
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      AWS_DEFAULT_REGION: us-east-1
      AWS_REGION: us-east-1
      AWS_S3_SIGNATURE_VERSION: s3v4
      AWS_S3_ADDRESSING_STYLE: path
    command: >
      mlflow server
      --host 0.0.0.0
      --port ${MLFLOW_PORT}
      --backend-store-uri sqlite:////mlflow/mlflow.db
      --default-artifact-root s3://mlflow/
    ports:
      - "${MLFLOW_PORT}:${MLFLOW_PORT}"
    volumes:
      - ../../data/mlflow:/mlflow

volumes:
  pgdata: {}
